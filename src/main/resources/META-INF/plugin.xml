<!-- Plugin Configuration File. Read more: https://plugins.jetbrains.com/docs/intellij/plugin-configuration-file.html -->
<idea-plugin>
    <!-- Unique identifier of the plugin. It should be FQN. It cannot be changed between the plugin versions. -->
    <id>YapiResultGenerate</id>
    <version>1.0</version>
    <depends>com.intellij.modules.java</depends>
    <idea-version since-build="2024.1.7" />
    <!-- Public plugin name should be written in Title Case.
         Guidelines: https://plugins.jetbrains.com/docs/marketplace/plugin-overview-page.html#plugin-name -->
    <!-- A displayed Vendor name or Organization ID displayed on the Plugins Page. -->
    <vendor email="l1401098954@gmail.com" url="https://www.yourcompany.com">yapi</vendor>

    <!-- Description of the plugin displayed on the Plugin Page and IDE Plugin Manager.
         Simple HTML elements (text formatting, paragraphs, and lists) can be added inside of <![CDATA[ ]]> tag.
         Guidelines: https://plugins.jetbrains.com/docs/marketplace/plugin-overview-page.html#plugin-description -->
    <description><![CDATA[
    这是一个针对Yapi接口输出填写的插件，他可以根据实体类自动生成对应的Yapi接口的Json形式，在所需的model类中点击右键即可生成。<br>
    <em>
        使用方式一
        在Controller类的接口方法上，有两个按钮，生成文档，可以生成当前接口的Yapi文档。生成文档(Mock)可以同时生成Mock数据的文档。
        使用方式二
        点击右键，找到Yapi返回结果生成，选择对应的类型即可自动生成Yapi接口的json形式。
        1.支持生成对象返回结果，生成结果可选择是否生成mock数据。
        2.支持生成列表返回结果，生成结果可选择是否生成mock数据。
        3.支持生成请求体对象json，生成结果可选择是否生成mock数据。
        生成mock数据需要大模型的支持，需要在设置中配置apikey。
        配置路径为：
        Settings -> Tools -> Yapi_ApiKey
    </em>
  ]]></description>

    <!-- Product and plugin compatibility requirements.
         Read more: https://plugins.jetbrains.com/docs/intellij/plugin-compatibility.html -->
    <depends>com.intellij.modules.platform</depends>

    <!-- Extension points defined by the plugin.
         Read more: https://plugins.jetbrains.com/docs/intellij/plugin-extension-points.html -->
    <extensions defaultExtensionNs="com.intellij">
        <toolWindow id="YapiShowWindow"
                    secondary="true"
                    anchor="right"
                    icon="AllIcons.Toolwindows.ToolWindowJsonPath"
                    factoryClass="com.plugin.demo.windows.YapiShowWindowFactory"/>
        <!--   配置界面   -->
        <!-- parentId配置界面在哪个菜单下，instance指定配置界面的类-->
        <applicationConfigurable parentId="tools" instance="com.plugin.demo.setting.CodeChronoSettingsConfigurable"
                                 id="ApiKey.Config"
                                 displayName="Yapi_ApiKey"/>

        <codeInsight.codeVisionProvider implementation="com.plugin.demo.codeinsight.YapiProvider"/>

        <codeInsight.codeVisionProvider implementation="com.plugin.demo.codeinsight.YapiMockProvider"/>

    </extensions>

    <actions>

        <!-- 创建父级菜单 -->
        <group id="YapiGenerate.Menu" text="Yapi返回结果生成" popup="true">
            <add-to-group group-id="EditorPopupMenu" anchor="first"/>
            <action id="YapiGenerate.Menu.Object"
                    class="com.plugin.demo.action.YapiGenerateAction"
                    text="对象json">
            </action>
            <action id="YapiGenerate.Menu.List"
                    class="com.plugin.demo.action.YapiGenerateActionList"
                    text="列表json">
            </action>
            <action id="YapiGenerate.Menu.ObjectMock"
                    class="com.plugin.demo.action.YapiGenerateActionMock"
                    text="对象json生成mock数据">
            </action>
            <action id="YapiGenerate.Menu.Mock"
                    class="com.plugin.demo.action.YapiGenerateActionListMock"
                    text="列表json生成mock数据">
            </action>
            <action id="YapiGenerate.Menu.RequestBody"
                    class="com.plugin.demo.action.YapiGenerateActionRequestBody"
                    text="请求体json">
            </action>
            <action id="YapiGenerate.Menu.RequestBodyMock"
                    class="com.plugin.demo.action.YapiGenerateActionRequestBodyMock"
                    text="请求体json生成mock数据">
            </action>
        </group>
    </actions>
</idea-plugin>
